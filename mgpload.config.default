#format: sh
#
#  Configuration for dbsnpload
#

#
#  If the MGICONFIG environment variable does not have a local override,
#  use the default "live" settings.
#
if [ "${MGICONFIG}" = "" ]
then
    MGICONFIG=/usr/local/mgi/live/mgiconfig
    export MGICONFIG
fi

CONFIG_MASTER=${MGICONFIG}/master.config.sh

. ${CONFIG_MASTER}

#
# override the mgiconfig settings for this hack
#
MGD_DBSERVER=${PG_DBSERVER}
#MGD_DBSERVER=notused
MGD_DBNAME=${PG_DBNAME}
MGD_DBUSER=${PG_DBUSER}
#MGD_DBPASSWORDFILE=${DBSNPLOAD}/.pg_dbo_dev_password
MGD_DBPASSWORDFILE=${PG_1LINE_PASSFILE}
MGD_DBURL=${PG_DBSERVER}
export MGD_DBSERVER MGD_DBNAME MGD_DBUSER MGD_DBPASSWORDFILE MGD_DBURL

RADAR_DBSERVER=${PG_DBSERVER}
#RADAR_DBSERVER=notused
RADAR_DBNAME=${PG_DBNAME}
RADAR_DBUSE=${PG_DBUSER}
#RADAR_DBPASSWORDFILE=${DBSNPLOAD}/.pg_dbo_dev_password
RADAR_DBPASSWORDFILE=${PG_1LINE_PASSFILE}
RADAR_DBURL=${PG_DBSERVER}

export RADAR_DBSERVER RADAR_DBNAME RADAR_DBUSER RADAR_DBPASSWORDFILE RADAR_DBURL

SNP_DBSERVER=${PG_DBSERVER}
#SNP_DBSERVER=notused
SNP_DBNAME=${PG_DBNAME}
SNP_DBUSER=${PG_DBUSER}
#SNP_DBPASSWORDFILE=${DBSNPLOAD}/.pg_dbo_dev_password
SNP_DBPASSWORDFILE=${PG_1LINE_PASSFILE}
SNP_DBURL=${PG_DBSERVER}
export SNP_DBSERVER SNP_DBNAME SNP_DBUSER SNP_DBPASSWORDFILE SNP_DBURL

###########################################################################
# settings that change between loads:
# 1) SNP_DATAVERSION
###########################################################################

###########################################################################
#
#  JAVA SETTINGS
#
###########################################################################

# allow 6g initial and max heap memory - note this is the max for which
# the loader will run since child processes (e.g. isql exec of sql files)
# need memory from the parent process (2G max given to a process by the op sys)
JAVARUNTIMEOPTS="-Xms15g -Xmx15g"

#JAVA_LIB=${DBSNPLOAD}/lib/java/core.jar:${DBSNPLOAD}/lib/java/dbsmgd.jar:${DBSNPLOAD}/lib/java/dbsrdr.jar:${DBSNPLOAD}/lib/java/dbssnp.jar:${DBSNPLOAD}/lib/java/dla.jar:${STAXAPI}:${STAXRI}
JAVA_LIB=${MGI_JAVALIB}/core.jar:${MGI_JAVALIB}/dbsmgd.jar:${MGI_JAVALIB}/dbsrdr.jar:${MGI_JAVALIB}/dla.jar:${STAXAPI}:${STAXRI}
CLASSPATH=.:${DBSNPLOAD}/dbsnpload.jar:${DBSNPLOAD}/lib/java/lib_java_dbssnp/dbssnp.jar:${JAVA_LIB}:${CLASSPATH}

export JAVARUNTIMEOPTS JAVA_LIB CLASSPATH

###########################################################################
#
#  LOAD SPECIFIC SETTINGS
#
###########################################################################

#
# snpload output file settings
#

# Full path the the logs, reports, and archive directories
FILEDIR=${DATALOADSOUTPUT}/dbsnp/dbsnpload

LOGDIR=${FILEDIR}/logs
RPTDIR=${FILEDIR}/reports
ARCHIVEDIR=${FILEDIR}/archive
OUTPUTDIR=${FILEDIR}/output

export FILEDIR LOGDIR RPTDIR ARCHIVEDIR OUTPUTDIR

# MGP VCF file filter settings
MGP_VCF_INPUT_DIR=${DATADOWNLOADS}/ftp-mouse.sanger.ac.uk/current_snps/
MGP_VCF_OUTPUT_DIR=${MGP_VCF_INPUT_DIR}
MGP_VCF_INPUT_FILE=${MGP_VCF_INPUT_DIR}/mgp.v5.merged.snps_all.dbSNP142.vcf.gz
MGP_VCF_LOG_FILE=${LOGDIR}/filter_vcf_snps.log

export MGP_VCF_INPUT_DIR MGP_VCF_OUTPUT_DIR MGP_VCF_INPUT_FILE MGP_VCF_LOG_FILE

#
# snpload input file settings
#

INPUTDIR=${DATADOWNLOADS}/ftp.ncbi.nih.gov/snp/mouse

# genotypes input file
GENO_SNP_INFILEDIR=${MGP_VCF_INPUT_DIR}

# main input file
NSE_SNP_INFILEDIR=${INPUTDIR}/XML

# input file prefixes used for processing chr files one at a time
GENO_SNP_INFILEPREFIX=chr
NSE_SNP_INFILEPREFIX=ds_ch

# input file suffixes used for processing chr files one at a time
GENO_SNP_INFILESUFFIX=.txt
NSE_SNP_INFILESUFFIX=.xml

export GENO_SNP_INFILEDIR NSE_SNP_INFILEDIR
export GENO_SNP_INFILEPREFIX NSE_SNP_INFILEPREFIX
export GENO_SNP_INFILESUFFIX NSE_SNP_INFILESUFFIX

# list of chromosomes to load, comma delimited
SNP_CHROMOSOMES_TOLOAD="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,X,Y,MT"
#SNP_CHROMOSOMES_TOLOAD="19,Y"

# full path to 'SNPs not loaded' report
SNP_NOTLOADED=${RPTDIR}/RefSnpsNotLoaded.txt

export SNP_CHROMOSOMES_TOLOAD SNP_NOTLOADED

#
# Reasons why snps not loaded
#
SNP_NOTLOADED_MULTICHR="maps to more than 1 chromosome in the C57BL/6J genome"
SNP_NOTLOADED_MULTICHR_COORD="maps to more than 2 locations on the same chromosome in the C57BL/6J genome"
SNP_NOTLOADED_NO_BL6="unmapped in the C57BL/6J genome"
SNP_NOTLOADED_NO_STRAINALLELE="no defined strain/alleles for any submitted assay of the SNP"

export SNP_NOTLOADED_MULTICHR SNP_NOTLOADED_MULTICHR_COORD
export SNP_NOTLOADED_NO_BL6 SNP_NOTLOADED_NO_STRAINALLELE

#
# general snpload settings
#

# dbSNP build number
SNP_DATAVERSION="dbSNP Build 142"

# current mouse genome build as specified in "<Assembly" tag "genomeBuild" 
# attribute in NSE input file. As of Build 126 there are coordinates for 
# Build 35 and Build 36.

GENOME_BUILD=38.3

export SNP_DATAVERSION GENOME_BUILD

# max allowable coordinates  a snp may have on a chromosome
MAX_CHR_COORD_CT=2

export MAX_CHR_COORD_CT

#  Java applications
DLA_LOADER=org.jax.mgi.app.dbsnploader.MGPLoader
DLA_START=org.jax.mgi.shr.dla.loader.DLAStart

export DLA_LOADER DLA_START

# The list of SNP tables for the java load to truncate
# Note that snpPopulation.sh truncates SNP_Accession
# Note that snpcacheload deals with SNP_ConsensusSnp_Marker
#DLA_TRUNCATE_SNP_TABLES=DP_SNP_Marker,SNP_ConsensusSnp,SNP_ConsensusSnp_StrainAllele,SNP_Coord_Cache,SNP_Flank,SNP_Strain,SNP_SubSnp,SNP_SubSnp_StrainAllele

# Ok to delete dbsnpload Accessions
# The population load truncates SNP_Accession
# set to true during development if you don't run population load first
# MGP  we don't delete anything
SNP_OK_TO_DELETE_ACCESSIONS=false

# update MGI_Tables records for this set of tables
#SNP_UPDATE_MGITABLES=${DLA_TRUNCATE_SNP_TABLES},SNP_Population,SNP_Accession

export SNP_OK_TO_DELETE_ACCESSIONS
#export DLA_TRUNCATE_LOAD_TABLES DLA_TRUNCATE_QC_TABLES SNP_OK_TO_DELETE_ACCESSIONS SNP_UPDATE_MGITABLES

#
# put production snp database in sql user mode settings
#

# set db in sgl user mode; does sleep loop until sgl user mode set
SNP_SGL_USER=${DBSNPLOAD}/bin/setSglUser.sh

# attempts to turn sgl user mode on/off
SNP_DO_SGL_USER=${MGI_DBUTILS}/bin/doSglUser.csh

# path to output file (sybase output which to grep for success/failure)
SNP_SGL_USER_FILE=${OUTPUTDIR}/sglUser.out

# sleep interval (secs) when attempting to put productin snp database in single
# user mode prior to loading snps
SNP_SLEEP_INTERVAL=30

export SNP_SINGLE_USER SNP_SLEEP_INTERVAL

# table names
POP_TABLE=SNP_Population
ACC_TABLE=SNP_Accession
STRAIN_TABLE=SNP_Strain
REFSEQ_TABLE=SNP_Transcript_Protein

export POP_TABLE ACC_TABLE STRAIN_TABLE REFSEQ_TABLE

#
# vocabulary and translation load settings
#

# snp data directory for vocabs and translations that are
# stored with the dbsnpload product 
SNP_DATA_DIR=${DBSNPLOAD}/data

export SNP_DATA_DIR 

# full path to simple vocabulary loader
VOCSIMPLELOAD=${VOCLOAD}/runSimpleFullLoadNoArchive.sh

# full path to dag vocabulary loader
VOCDAGLOAD=${VOCLOAD}/runDAGFullLoad.sh

# full load to wrapper to run  dbsnpload vocabularies
DBSNP_VOCLOAD=${DBSNPLOAD}/bin/loadVoc.sh

export VOCLOAD VOCSIMPLELOAD VOCDAGLOAD DBSNP_VOCLOAD

# vocload handle vocab settings
HANDLE_VOCAB_NAME="SNP Submitter Handle"

# script that creates HANDLE_VOCAB_FILE
HANDLE_VOCAB_FILE_CREATOR=${DBSNPLOAD}/bin/snpSubHandle.py

# intermediate file for creating the handle file for the
# handle vocab load; simply raw lines grepped from the xml file
INT_HANDLE_VOCAB_FILE=${OUTPUTDIR}/subHandle.txt

# input file to the handle vocab load
HANDLE_VOCAB_FILE=${OUTPUTDIR}/subHandle.vocab.in

export HANDLE_VOCAB_NAME
export HANDLE_VOCAB_FILE_CREATOR INT_HANDLE_VOCAB_FILE HANDLE_VOCAB_FILE

# translation load
DBSNP_TRANS_LOAD=${DBSNPLOAD}/bin/loadTranslations.sh
TRANSOUTPUTDIR=${OUTPUTDIR}/translationload
LOADTRANSLOG=${LOGDIR}/loadTranslations.log

export DBSNP_TRANS_LOAD TRANSOUTPUTDIR LOADTRANSLOG 

#
# population load settings
#

# full path to population load
POPULATION_LOAD=${DBSNPLOAD}/bin/snpPopulation.sh

# the set of uniq population  lines grepped from the genotype files
# looks like <Population popId="735" handle="WI" locPopId="MOUSE">
#POP_FILE=${OUTPUTDIR}/populations.txt
POP_FILE=${DBSNPLOAD}/data/populations.txt

POP_LOGICALDB_NAME="SubSNP Population"
POP_MGITYPE_NAME="SNP Population"

export POPULATION_LOAD POP_FILE POP_LOGICALDB_NAME POP_MGITYPE_NAME

#
# snp marker cacheload settings
#

# snp marker load
SNP_MARKER_CACHE_LOAD=${SNPCACHELOAD}/snpmarker.sh

export SNP_MARKER_CACHE_LOAD

#
# update snp strain order settings
#

# strain ordering script
STRAIN_ORDER_LOAD=${DBSNPLOAD}/bin/updateSnpStrainOrder.sh

# copy of the set of snp strains and keys used in updating
SNP_STRAIN_FILE=${LOGDIR}/snpStrainsInMGI.log

# strain ordering input file
MGI_STRAINORDER_FILE=${SNP_DATA_DIR}/mgiSnpStrainOrder.txt

# diagnostic log for strain order updates
LOG_STRAIN=${LOGDIR}/updateSnpStrainOrder.log

# discrepancy file
LOG_DISCREP=${LOGDIR}/snpStrainOrderDiscrepancy.log

export STRAIN_ORDER_LOAD SNP_STRAIN_FILE MGI_STRAINORDER_FILE LOG_STRAIN
export LOG_DISCREP

# refseq migration settings
REFSEQ_BCP_FILE=SNP_Transcript_Protein.bcp
REFSEQ_BCP=${OUTPUTDIR}/${REFSEQ_BCP_FILE}
REFSEQ_LOG=${LOGDIR}/migrateRefSeqs.log

export REFSEQ_BCP_FILE REFSEQ_BCP REFSEQ_LOG

#
# post-processing settings
# - backup loaded snp db, load production snp db,
#   update production mgd..MGI_dbinfo
#

# post-processing script
SNP_POST_PROCESS=${DBSNPLOAD}/bin/postProcess.sh

# full path to backup from the unix server on which the load runs; for dump
SNP_BACKUP_LOCALPATH=/extra1/sybase/snp.backup

export SNP_POST_PROCESS SNP_BACKUP_LOCALPATH 

# SQL STREAM
# this overrides the default BCP_Inline_Stream
DLA_DB_PREFIX=MGD
DLA_LOAD_STREAM=org.jax.mgi.shr.dbutils.dao.BCP_Script_Stream
SNP_STREAM=org.jax.mgi.shr.dbutils.dao.BCP_Script_Stream

export DLA_DB_PREFIX DLA_LOAD_STREAM SNP_STREAM

# this load's MGI_User login value for radar logging of jobstream
JOBSTREAM=dbsnp_load

export JOBSTREAM

#  Complete path name of the log files
LOG_PROC=${LOGDIR}/mgpload.proc.log
LOG_DIAG=${LOGDIR}/mgpload.diag.log
LOG_CUR=${LOGDIR}/mgpload.cur.log
LOG_VAL=${LOGDIR}/mgpload.val.log

# Send debug messages to the diagnostic log
LOG_DEBUG=true
DBDEBUG=false
CACHE_DEBUG=false

# logger factory class - allows classes to get their own loggers
LOG_FACTORY=org.jax.mgi.shr.dla.log.DLALoggerFactory

export LOG_PROC LOG_DIAG LOG_CUR LOG_VAL LOG_DEBUG 
export DBDEBUG CACHE_DEBUG LOG_FACTORY

###########################################################################
#
#  BCP MANAGER SETTINGS BY DATABASE
#
###########################################################################

# Settings used to create a BCP manager for the MGD database
# Note snpload uses only for creating lookups, no execution needed
MGD_BCP_PATH=${OUTPUTDIR}
MGD_BCP_PREVENT_EXECUTE=false
MGD_BCP_TRUNCATE_LOG=true
MGD_BCP_DROP_INDEXES=true
MGD_BCP_RECORD_STAMPING=false
MGD_BCP_AUTO_FLUSH=false
MGD_BCP_OK_TO_OVERWRITE=true

export MGD_BCP_PATH MGD_BCP_PREVENT_EXECUTE MGD_BCP_TRUNCATE_LOG
export MGD_BCP_DROP_INDEXES MGD_BCP_RECORD_STAMPING MGD_BCP_AUTO_FLUSH
export MGD_BCP_OK_TO_OVERWRITE

#  Settings used to create a BCP manager for the SNP database
SNP_BCP_PATH=${OUTPUTDIR}
SNP_BCP_PREVENT_EXECUTE=false
SNP_BCP_TRUNCATE_LOG=true
SNP_BCP_DROP_INDEXES=true
SNP_BCP_RECORD_STAMPING=false
SNP_BCP_AUTO_FLUSH=true
SNP_BCP_OK_TO_OVERWRITE=true

export SNP_BCP_PATH SNP_BCP_PREVENT_EXECUTE SNP_BCP_TRUNCATE_LOG
export SNP_BCP_DROP_INDEXES SNP_BCP_RECORD_STAMPING SNP_BCP_AUTO_FLUSH
export SNP_BCP_OK_TO_OVERWRITE

###########################################################################
#
#  SQL SCRIPTWRITER SETTINGS FOR MGI_dbinfo update
#
###########################################################################

SCP_PATH=${SNP_BCP_PATH}
SCP_PREVENT_EXECUTE=false
SCP_OK_TO_OVERWRITE=true

SCP_FILENAME=MGIdbinfo
SCP_OUTFILENAME=MGIdbinfo

export SCP_PATH SCP_PREVENT_EXECUTE SCP_OK_TO_OVERWRITE
export SCP_FILENAME SCP_OUTFILENAME


###########################################################################
#
#  MISCELLANEOUS SETTINGS
#
###########################################################################
#  Installation directory for the DBSNP Data Provider load
INSTALLDIR=${DBSNPLOAD}

export INSTALLDIR

#  The name of the load for the subject of an email notification
MAIL_LOADNAME="MGP SNP Load"

#  Recipient list for mailing the log files (comma-separated)
MAIL_LOG_CUR=""

export MAIL_LOADNAME MAIL_LOG_CUR
